{"name":"Qpdf","tagline":"Primary QPDF source code and documentation","body":"This is the QPDF package.  Information about it can be found at\r\nhttp://qpdf.sourceforge.net.  The source code repository is hosted\r\nat github: https://github.com/qpdf/qpdf.\r\n\r\nQPDF is copyright (c) 2005-2013 Jay Berkenbilt\r\n\r\nThis software may be distributed under the terms of version 2 of the\r\nArtistic License which may be found in the source distribution as\r\n\"Artistic-2.0\".  It is provided \"as is\" without express or implied\r\nwarranty.\r\n\r\n\r\nPrerequisites\r\n=============\r\n\r\nQPDF depends on external libraries \"zlib\" and \"pcre\".  These are part\r\nof virtually all Linux distributions and are readily available;\r\ndownload information appears in the documentation.  For Windows, you\r\ncan download pre-built binary versions of those libraries for some\r\ncompilers; see README-windows.txt for additional details.\r\n\r\nQPDF requires a C++ compiler that works with STL.  Your compiler must\r\nalso support \"long long\".  Almost all modern compilers do.  If you are\r\ntrying to port qpdf to a compiler that doesn't support long long, you\r\ncould change all occurrences of \"long long\" to \"long\" in the source\r\ncode, noting that this would break binary compatibility with other\r\nbuilds of qpdf.  Doing so would certainly prevent qpdf from working\r\nwith files larger than 2 GB, but remaining functionality would most\r\nlikely work fine.  If you built qpdf this way and it passed its test\r\nsuite with large file support disabled, you could be confident that\r\nyou had an otherwise working qpdf.\r\n\r\n\r\nLicensing terms of embedded software\r\n====================================\r\n\r\nQPDF makes use of zlib and pcre for its functionality.  These packages\r\ncan be downloaded separately from their own download locations, or\r\nthey can be downloaded in the external-libs area of the qpdf download\r\nsite.\r\n\r\nThe Rijndael encryption implementation used as the basis for AES\r\nencryption and decryption support comes from Philip J. Erdelsky's\r\npublic domain implementation.  The files libqpdf/rijndael.cc and\r\nlibqpdf/qpdf/rijndael.h remain in the public domain.  They were\r\nobtained from\r\n\r\n  http://www.efgh.com/software/rijndael.htm\r\n  http://www.efgh.com/software/rijndael.txt\r\n\r\nThe embedded sha2 code comes from sphlib 3.0\r\n\r\n  http://www.saphir2.com/sphlib/\r\n\r\nThat code has the following license:\r\n\r\n  Copyright (c) 2007-2011  Projet RNRT SAPHIR\r\n\r\n  Permission is hereby granted, free of charge, to any person obtaining\r\n  a copy of this software and associated documentation files (the\r\n  \"Software\"), to deal in the Software without restriction, including\r\n  without limitation the rights to use, copy, modify, merge, publish,\r\n  distribute, sublicense, and/or sell copies of the Software, and to\r\n  permit persons to whom the Software is furnished to do so, subject to\r\n  the following conditions:\r\n\r\n  The above copyright notice and this permission notice shall be included\r\n  in all copies or substantial portions of the Software.\r\n\r\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n\r\nBuilding on UNIX/Linux\r\n======================\r\n\r\nFor UNIX and UNIX-like systems, you can usually get by with just\r\n\r\n./configure\r\nmake\r\nmake install\r\n\r\nPackagers may set DESTDIR, in which case make install will install\r\ninside of DESTDIR, as is customary with many packages.  For more\r\ndetailed general information, see the \"INSTALL\" file in this\r\ndirectory.  If you are already accustomed to building and installing\r\nsoftware that uses autoconf, there's nothing new for you in the\r\nINSTALL file.\r\n\r\n\r\nBuilding on Windows\r\n===================\r\n\r\nQPDF is known to build and pass its test suite with mingw (latest\r\nversion tested: gcc 4.6.2), mingw64 (latest version tested: 4.7.0) and\r\nMicrosoft Visual C++ 2010, both 32-bit and 64-bit versions.  MSYS plus\r\nActiveState Perl is required to build as well in order to get make\r\nand other related tools.  See README-windows.txt for details on how to\r\nbuild under Windows, see README-windows.txt.\r\n\r\n\r\nAdditional Notes on Build\r\n=========================\r\n\r\nQPDF's build system, inspired by abuild (http://www.abuild.org), can\r\noptionally use its own built-in rules rather than using libtool and\r\nobeying the compiler specified with configure.  This can be enabled by\r\npassing --with-buildrules=buildrules where buildrules corresponds to\r\none of the .mk files (other than rules.mk) in the make directory.\r\nThis should never be necessary on a UNIX system, but may be necessary\r\non a Windows system.  See README-windows.txt for details.  There is a\r\ngcc-linux.mk file enable \"gcc-linux\" build rules, but it is intended\r\nto help test the build system; Linux users should build with the\r\n\"libtools\" rules, which are enabled by default.\r\n\r\nThe QPDF package provides some executables and a software library.  A\r\nuser's manual can be found in the \"doc\" directory.  The docbook\r\nsources to the user's manual can be found in the \"manual\" directory.\r\n\r\nThe software library is just libqpdf, and all the header files are in\r\nthe qpdf subdirectory.  If you link statically with -lqpdf, then you\r\nwill also need to link with -lpcre and -lz.  The shared qpdf library\r\nis linked with -lpcre and -lz, and none of qpdf's public header files\r\ndirectly include files from pcre or libz, so in many cases, qpdf's\r\ndevelopment files are self contained.\r\n\r\nTo learn about using the library, please read comments in the header\r\nfiles in include/qpdf, especially QPDF.hh, QPDFObjectHandle.hh, and\r\nQPDFWriter.hh.  You can also study the code of qpdf/qpdf.cc, which\r\nexercises most of the public interface.  There are additional example\r\nprograms in the examples directory.  Reading all the source files in\r\nthe qpdf directory (including the qpdf command-line tool and some test\r\ndrivers) along with the code in the examples directory will give you a\r\ncomplete picture of every aspect of the public interface.\r\n\r\n\r\nAdditional Notes on Test Suite\r\n==============================\r\n\r\nBy default, slow tests are disabled.  Slow tests include image\r\ncomparison tests and large file tests.  Image comparison tests can be\r\nenabled by passing --enable-test-compare-images to ./configure.  This\r\nwas on by default in qpdf versions prior to 3.0, but is now off by\r\ndefault.  Large file tests can be enabled by passing\r\n--with-large-file-test-path=path to ./configure or by setting the\r\nQPDF_LARGE_FILE_TEST_PATH environment variable.  Run ./configure\r\n--help for additional options.  The test suite provides nearly full\r\ncoverage even without these tests.  Unless you are making deep changes\r\nto the library that would impact the contents of the generated PDF\r\nfiles or testing this on a new platform for the first time, there is\r\nno real reason to run these tests.  If you're just running the test\r\nsuite to make sure that qpdf works for your build, the default tests\r\nare adequate.  The configure rules for these tests do nothing other\r\nthan setting variables in autoconf.mk, so you can feel free to turn\r\nthese on and off directly in autoconf.mk rather than rerunning\r\nconfigure.\r\n\r\nIf you are packaging qpdf for a distribution and preparing a build\r\nthat is run by an autobuilder, you may want to add the\r\n--enable-show-failed-test-output to configure options.  This way, if\r\nthe test suite fails, test failure detail will be included in the\r\nbuild output.  Otherwise, you will have to have access to the\r\nqtest.log file from the build to view test failures.  The debian\r\npackages for qpdf enable this option, for example.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}